{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://weifeng233.github.io","root":"/"},"pages":[],"posts":[{"title":"UI PART1","slug":"UI-1","date":"2021-06-26T06:57:07.355Z","updated":"2021-06-26T07:03:05.492Z","comments":true,"path":"2021/06/26/UI-1/","link":"","permalink":"https://weifeng233.github.io/2021/06/26/UI-1/","excerpt":"","text":"Try hard. -Zheka Smirnov 本文的部分名词与描述或许与别处有出入以至于错误，欢迎在评论区指出 相较于原版MC，IC的UI系统并不有多复杂，可简单地用下图概括 尽管这张图看似过于简略，但事实的确如此。快速掌握UI的基本控件等内容并不困难，但难点是如何用它们拼凑出美观且实用的用户界面 PS：本文不会讲到每一个控件及其函数，更详细的内容可见官方文档 首先在IC中，用户界面的控件的大小和单位都是使用同一的unit单位，1unit = 窗口宽度/1000 UI资源UI所使用到的贴图存放于构筑文件(build.config)所指定的gui类型的资源文件夹，在使用时只需要输入文件名即可(不包含后缀与文件夹) 除此之外，还有： color: 颜色，即Android的Color类，可使用android.graphics.Color.rgb(r, g, b)等自定义颜色 font: 字体，包含三个属性，{size: 文本大小, color: 文本颜色, shadow: 文本阴影}，其中文本阴影为范围[0, 1]的浮点数 frame: 边框，一般使用大小为16x16的贴图，在使用时会被自动拉伸至所需大小 DrawingDrawing，顾名思义就是在界面中进行绘制，在UI的描述对象中Drawing为一个包含绘制指令的数组 描述对象：用于设定UI以及在UI打开时对其进行动态修改 123456//格式drawing: [ &#123;/*指令1*/&#125;, &#123;/*指令2*/&#125;, ...] 常用标准指令如下： 123456&#123;type: &quot;background&quot;, color: 颜色&#125; //填充背景颜色&#123;type: &quot;bitmap&quot;, bitmap: 贴图, x: Number, y: Number, width: Number, height: Number, scale: Number&#125; //绘制贴图，scale - 贴图像素和unit的缩放比例，默认1像素=1unit&#123;type: &quot;frame&quot;, x: Number, y: Number, width: Number, height: Number, bitmap: 贴图, bg: 颜色, scale: Number&#125; //绘制边框，bg - 边框背景颜色&#123;type: &quot;text&quot;, text: String, x: Number, y: Number, font: 字体&#125; //绘制文本&#123;type: &quot;line&quot;, x1: Number, y1: Number, x2: Number, y2: Number, width: Number, height: Number, color: 颜色&#125; //绘制直线，width - 直线粗细&#123;type: &quot;custom&quot;, onDraw: Function(canvas, scale)&#125; //自定义绘制，onDraw - 在绘制时调用的函数，传参包括当前绘制的Canvas对象和scale数值，无返回值 PS：custom drawing的canvas为Android的Canvas类 ElementsElements，指UI中的控件，与Drawing不同的是Elements在描述对象里为一个包含各控件的对象 Elements中的每一个控件都有其唯一且独特的名称，即每一个对象都有其唯一的建 123456//格式elements: &#123; &quot;名称1&quot;: &#123;/*元素1*/&#125;, &quot;名称2&quot;: &#123;/*元素2*/&#125;, ...&#125; 每一个元素都有以下基本属性： 1234567&#123; type: &quot;type&quot;, //元素类型 x: number, //x坐标 y: number, //y坐标 z: number, //z坐标，用于区分控件层次防止混乱重叠 clicker: Click对象 //控件点击对象&#125; 此处控件点击对象指一个包含短时点击事件和长时点击事件函数的对象： 12345678910&#123; onClick: function(position, container, tileEntity, window, canvas, scale) &#123; //container - 界面打开的容器 //tileEntity - 如果界面是为某方块实体打开的，它就会传出它，否则传出null &#125;, onLongClick: function(position, container, tileEntity, window, canvas, scale) &#123; //container - 界面打开的容器 //tileEntity - 如果界面是为某方块实体打开的，它就会传出它，否则传出null &#125;&#125; 同样地，常用元素如下： 123456789&#123;type: &quot;slot&quot;, x: Number, y: Number, size: Number, visual: Boolean/Function(id, data, count), bitmap: 贴图, clicker: Click对象&#125; //物品格，visual - 是否可选中&#123;type: &quot;invSlot&quot;, x: Number, y: Number, size: Number, index: Number, bitmap: 贴图&#125; //背包物品格，index - 对应背包物品格id&#123;type: &quot;button&quot;, x: Number, y: Number, bitmap: 贴图, bitmap2: 贴图, scale: Number, clicker: Click对象&#125; //按钮，bitmap2 - 按下时贴图，button的Click对象与其他的稍有不同，其点击事件函数的参数为(container, tileEntity, position, window, canvas, scale)&#123;type: &quot;closeButton&quot;, x: Number, y: Number, global: Boolean, bitmap: 贴图, bitmap2: 贴图, scale: Number&#125; //关闭窗口按钮，global - 为真时将关闭窗口组内所有窗口，否则只关闭所在单窗口，详见下文&#123;type: &quot;scale&quot;, x: Number, y: Number, direction: Number, bitmap: 贴图, scale: Number, invert: Number, overlay: 贴图, overlayScale: Number, overlayOffset: &#123;x: Number, y: Number&#125;&#125; //刻度表或进度栏，direction - 朝向，详见下文，invert - 是否翻转贴图，overlay - 重叠在scale上的贴图，Scale和Offset分别为其缩放比例和相对scale元素的位置&#123;type: &quot;text&quot;, x: Number, y: Number, width: Number, height: Number, text: String, font: 字体&#125; //文本&#123;type: &quot;fps&quot;, interpolate: Boolean, period: Number, font: 字体, multiline: Boolean, format: Boolean, maxCharsPerLine: Number&#125;//FPS文本&#123;type: &quot;image&quot;, x: Number, y: Number, bitmap: 贴图, scale: Number, overlay: 贴图, overlayScale: Number, overlayOffset: &#123;x: Number, y: Number&#125;, clicker: Click对象&#125; //贴图&#123;type: &quot;custom&quot;, onSetup: Function(element: Element), onDraw: Function(element, canvas, scale), onTouchReleased: Function(element), onBindingUpdated: Function(element, name, value), onReset: Function(element), onRelease: Function(element), onContainerInit: Function(element, container, elementName)&#125;//自定义元素，各函数均无返回值 除以上元素之外，还有Scroll，Switch，Tab等元素未被提及，但用法大同小异，建议自行按照官方文档进行尝试，这样才是最有效率的学习方法 direction参数: 0 - 朝右1 - 朝上2 - 朝左3 - 朝下 在简要介绍完Drawing和Elments后，在介绍重头戏Window之前先来补充一点其他内容 自定义参数用于修改Window的一些默认参数，如下： 12345678params: &#123; slot: &quot;格子贴图&quot;, invSlot: &quot;背包格子贴图&quot;, frame: &quot;平面边框贴图&quot;, selection: &quot;格子高亮贴图&quot;, closeButton: &quot;关闭按钮贴图&quot;, closeButton2: &quot;按下的关闭按钮贴图&quot;,&#125; UI.getContext()该函数用于获取Android UI线程的上下文，以便调用Android API来操控界面控件 UI.getScreenHeight()获取以unit为单位的屏幕高度，与之相同的还有UI.getScreenRelativeHeight() ElementSet元素集合 WindowLocation窗口位置及大小，使用unit作为单位，详细参数见官方文档 Style窗口风格，有CLASSIC和DEFAULT两种 Slot，FullSlot窗口中的物品格对象，Slot包含物品的id、特殊值、数量和额外数据，FullSlot则在其基础上添加了如drop、set等方法 Window在官方文档中，窗口(Window)有如下几个类： StandardWindow StandartWindow TabbedWindow Window WindowGroup 在这里将暂先略讲StandartWindow，Window和WindowGroup StandartWindow定义为UI.StandartWindow类，以一个描述对象定义界面 描述对象格式(摘自BigFish和方法放寒假翻译的官方Wiki第8-2节)： 123456789101112131415161718192021222324252627282930&#123; standart: &#123;//这种类型的界面标准参数在这里写入，它们允许你快速地设置基本的元素，例如标题、背景和背包 //如果你想定义标准的元素，但是又不想改变默认值，那么就单写上值 - standart: true，例如inventory: &#123;standart: true&#125; header: &#123;//设定你是否需要一个标头，包含一个标题和和一个关闭按钮 text: &#123;//必需的参数，如果你定义了标头 text: &quot;标题文本&quot;, //文本内容，必需的参数 &#125;, Font: &#123;...&#125;, //文本字体，如果你想改变默认值，就请定义它 color: 颜色, //只有当你想改变标题颜色的时候才需要 frame: &quot;边框文本&quot;, //只有当你想改变标头边框的时候才需要 width: 80, //表头的高度，以unit为单位 hideButton: true, //定义并设置为true则移除关闭按钮 &#125;, inventory: &#123;//要想定义标准背包，请使用inventory: &#123;standart: true&#125; width: 300, //背包窗口的宽度 padding: 20, //背包窗口的内边距 &#125;, background: &#123;//要定义一个默认背景，请使用background: &#123;standart: true&#125; color: 颜色, //如果你想改变背景的颜色就定义它 bitmap: &quot;背景图片&quot;, //如果你想添加一个背景图片就定义它 frame: &quot;边框贴图&quot; //如果你想添加一个边框就定义它 &#125;, minHeight: 650, //如果以unit为单位的窗口高度小于这个参数的值，那么窗口将自动转变为滚动窗口，以此来保证它的内部大小的高度为minHeight units &#125;, params: &#123; //自定义（改变默认材质） &#125;, drawing: [/*背景渲染指令*/], elements: &#123;/*元素的描述*/&#125;&#125; StandartWindow是适用性最高的窗口，在多人游戏中表现优于Window，但尽管如此绝对布局仍是其一大缺点，在实际使用时需要考虑到不同的屏幕尺寸会造成的控件偏移。因此，尽量将控件放置在屏幕内部区域 Window相较于StandartWindow，Window的优点在于其灵活性，与默认为方块互动界面的StandartWindow不同，Window可以通过修改WindowLocation来显示在游戏界面上的任意位置，且可以通过适当修改padding值来尽可能避免控件偏移。 Window默认没有关闭按钮和玩家背包栏，在使用时需要按需自行添加 WindowGroupStandartWindow和Window都是单个窗口，如果需要复杂的界面那么用多个窗口组合无疑是最最好的选择，将一个复杂窗口分为多个小窗口也可以提高调试效率。 WindowGroup的主要作用就是将多个Window整合在一起，将其组合布局在一起，例如现在的工作台界面就是一个包含3个Window的WindowGroup Hierarchic UI库HierarchicUI由Zheka开发，用于以json来定义分层式的UI，可以方便的创建绝对布局和线性布局，届时json会被解析为WindowGroup 此外，该库还可以定义视图布局并且对于一个视图可以灵活地嵌入到其他界面，并且基于它创建继承其全部属性的子视图，无疑让WindowGroup展示美观的复杂界面更加容易。","categories":[],"tags":[]}],"categories":[],"tags":[]}