<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>微风的博客</title>
  
  
  <link href="https://weifeng233.github.io/atom.xml" rel="self"/>
  
  <link href="https://weifeng233.github.io/"/>
  <updated>2021-08-21T17:26:09.406Z</updated>
  <id>https://weifeng233.github.io/</id>
  
  <author>
    <name>SugarBreeze</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UI PART2</title>
    <link href="https://weifeng233.github.io/2021/08/14/UI-2/"/>
    <id>https://weifeng233.github.io/2021/08/14/UI-2/</id>
    <published>2021-08-13T17:51:44.941Z</published>
    <updated>2021-08-21T17:26:09.406Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注意：本教程仅为简单介绍UI的窗口，不会涉及详细的函数。如果想要了解更多请阅读官方文档。</strong></p><p>在上期教程中我们简要介绍了ICMod的UI构成与基本控件，接下来将详细介绍控件用法以及如何组成一个“精美”的界面。</p><h2 id="StandardWindow"><a href="#StandardWindow" class="headerlink" title="StandardWindow"></a>StandardWindow</h2><p><em><strong>在此纠正上一篇专栏的严重错误：StandartWindow在现在版本的InnerCore中已经启用，使用StandardWindow替代。</strong></em></p><blockquote><p>你可以永远相信StandardWindow。 —Prosto Sostavil</p></blockquote><p><code>StandardWindow</code>是一个由三部分组成的<code>WindowGroup</code>，分别为<code>main</code>, <code>inventory</code>和<code>header</code>，对应关系如下图：</p><p><img src="/2021/08/14/UI-2/1629395365943.png" alt="StandartWindow"></p><p>Standard样式与原版的PocketUI相似，默认自带一个展示玩家背包的可滑动界面以及常规的关闭界面按钮和界面名称等，非常适合用作一般的方块实体的互动界面。</p><p>在此使用工业的火力发电机界面作为示例：</p><p><img src="/2021/08/14/UI-2/Screenshot_1.jpg" alt="火力发电机界面截图"></p><p>这是一个简单的界面，但基本上包含了常用控件，让我们简要分析一下其代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码使用TypeScript编写且分不同部分在多个文件中，为方便讲解取主要代码并使用JavaScript重写</span></span><br><span class="line"><span class="keyword">const</span> GUI_SCALE = <span class="number">3.2</span>; <span class="comment">//声明GUI_SCALE常量，以便统一模组内各界面</span></span><br><span class="line"><span class="keyword">new</span> UI.StandardWindow(&#123;</span><br><span class="line">    <span class="attr">standard</span>: &#123;</span><br><span class="line">        <span class="attr">header</span>: &#123;<span class="attr">text</span>: &#123;<span class="attr">text</span>: Translation.translate(<span class="string">&quot;Generator&quot;</span>)&#125;&#125;, <span class="comment">//此处使用Translate类函数以实现多语言，详见官方文档</span></span><br><span class="line">        <span class="attr">inventory</span>: &#123;<span class="attr">standard</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">        <span class="attr">background</span>: &#123;<span class="attr">standard</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">drawing</span>: [<span class="comment">//两个scale元素对应的当其为空时的贴图</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;bitmap&quot;</span>, <span class="attr">x</span>: <span class="number">530</span>, <span class="attr">y</span>: <span class="number">144</span>, <span class="attr">bitmap</span>: <span class="string">&quot;energy_bar_background&quot;</span>, <span class="attr">scale</span>: GUI_SCALE&#125;,</span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;bitmap&quot;</span>, <span class="attr">x</span>: <span class="number">450</span>, <span class="attr">y</span>: <span class="number">150</span>, <span class="attr">bitmap</span>: <span class="string">&quot;fire_background&quot;</span>, <span class="attr">scale</span>: GUI_SCALE&#125;,</span><br><span class="line">],</span><br><span class="line">    <span class="attr">elements</span>: &#123;</span><br><span class="line"><span class="string">&quot;energyScale&quot;</span>: &#123;<span class="attr">type</span>: <span class="string">&quot;scale&quot;</span>, <span class="attr">x</span>: <span class="number">530</span> + GUI_SCALE * <span class="number">4</span>, <span class="attr">y</span>: <span class="number">144</span>, <span class="attr">direction</span>: <span class="number">0</span>, <span class="attr">value</span>: <span class="number">0.5</span>, <span class="attr">bitmap</span>: <span class="string">&quot;energy_bar_scale&quot;</span>, <span class="attr">scale</span>: GUI_SCALE&#125;, <span class="comment">//注意此处x的值比对应的bitmap加了GUI_SCALE*4，这是因为它的贴图两端各少了4个像素，以便完整显示进度</span></span><br><span class="line"><span class="string">&quot;burningScale&quot;</span>: &#123;<span class="attr">type</span>: <span class="string">&quot;scale&quot;</span>, <span class="attr">x</span>: <span class="number">450</span>, <span class="attr">y</span>: <span class="number">150</span>, <span class="attr">direction</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="number">0.5</span>, <span class="attr">bitmap</span>: <span class="string">&quot;fire_scale&quot;</span>, <span class="attr">scale</span>: GUI_SCALE&#125;,</span><br><span class="line"><span class="string">&quot;slotEnergy&quot;</span>: &#123;<span class="attr">type</span>: <span class="string">&quot;slot&quot;</span>, <span class="attr">x</span>: <span class="number">441</span>, <span class="attr">y</span>: <span class="number">75</span>&#125;,</span><br><span class="line"><span class="string">&quot;slotFuel&quot;</span>: &#123;<span class="attr">type</span>: <span class="string">&quot;slot&quot;</span>, <span class="attr">x</span>: <span class="number">441</span>, <span class="attr">y</span>: <span class="number">212</span>&#125;,</span><br><span class="line"><span class="string">&quot;textInfo1&quot;</span>: &#123;<span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">x</span>: <span class="number">642</span>, <span class="attr">y</span>: <span class="number">142</span>, <span class="attr">width</span>: <span class="number">300</span>, <span class="attr">height</span>: <span class="number">30</span>, <span class="attr">text</span>: <span class="string">&quot;0/&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;textInfo2&quot;</span>: &#123;<span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">x</span>: <span class="number">642</span>, <span class="attr">y</span>: <span class="number">172</span>, <span class="attr">width</span>: <span class="number">300</span>, <span class="attr">height</span>: <span class="number">30</span>, <span class="attr">text</span>: <span class="string">&quot;10000&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看出在StandardWindow中使用的是绝对坐标，而且可与贴图像素对应，因此只需要耐心的慢慢调整就能够得到一个不错的界面。</p><h3 id="与方块实体互动"><a href="#与方块实体互动" class="headerlink" title="与方块实体互动"></a>与方块实体互动</h3><p>此部分不是本教程的主要内容，因此将简要带过。</p><p>在IC中，注册方块实体的函数为<code>TileEntity.registerPrototype(blockID: number, customPrototype: TileEntityPrototype): void</code>，参数只有两个：<code>方块ID</code>和<code>方块实体原型</code>。</p><p>方块实体原型是一个JS对象，包含方块实体的数据和事件。要将创建的StandardWindow对象与方块实体绑定则需要在方块实体原型中设置<code>getGuiScreen</code>函数并返回界面对象。这样IC会自动为该界面对象创建相应的容器对象，你可以在方块实体原型的函数中使用<code>this.container</code>来获得容器对象并使用其提供的方法与界面交互。</p><h3 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h3><p>StandardWindow的可玩性远不止如此，你可以试着除去StandardWindow的默认控件，并从0开始自定义界面，或者在方块实体原型的<code>getGuiScreen</code>方法中编写逻辑以使在不同的情况下打开不同的界面。</p><p>示例为我去年3月份初次尝试UI时所写的会根据MC设置的UI档案切换StandardWindow的方块实体（<em>PS：图二的界面标题有偏移Bug，在之后的版本中已被修复</em>）。整个界面从开始构思到完成大概用了5天时间(大部分时间用在编写库上，但如今得益于WindowGroup，可以更快地完成该任务。</p><p><img src="/2021/08/14/UI-2/%E6%88%AA%E5%B1%8F_20200317_235539.jpg" alt="PocketUI"></p><p><img src="/2021/08/14/UI-2/%E6%88%AA%E5%B1%8F_20200318_010817.jpg" alt="ClassicUI"></p><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p><code>Window</code>是最基本的窗口，相较于StandardWindow，Window更为灵活，适合用作弹窗或者HUD。</p><p>在创建一个Window对象的时候，可以像StandardWindow那样传入一个包含Drawing和Elements等的对象。但能够突出Window特色的是location参数，你可以自定义Window的大小，在屏幕上的位置，内边距和可滑动窗口大小（<em>PS：Window内的<code>unit</code>为此Window宽度的千分之一）。</em></p><p>值得一提，内边距<code>padding</code>的会覆盖<code>x|y|width|height</code>的效果。</p><p>举个简单的空白窗口界面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一些常量</span></span><br><span class="line"><span class="keyword">const</span> GUI_SCALE = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> WIDTH = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> HEIGHT = UI.getScreenHeight();</span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line"><span class="keyword">let</span> testWindow = <span class="keyword">new</span> UI.Window(&#123;</span><br><span class="line">    <span class="attr">location</span>: &#123; <span class="comment">//此处运算是为方便居中</span></span><br><span class="line">        <span class="attr">x</span>: (WIDTH - <span class="number">300</span>) / <span class="number">2</span>,</span><br><span class="line">        <span class="attr">y</span>: (HEIGHT - <span class="number">225</span>) / <span class="number">2</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">225</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">drawing</span>: [ <span class="comment">//贴图是从拆原版包扒的XD</span></span><br><span class="line">        &#123;<span class="attr">type</span>: <span class="string">&quot;background&quot;</span>, <span class="attr">color</span>: android.graphics.Color.TRANSPARENT&#125;,</span><br><span class="line">        &#123;<span class="attr">type</span>: <span class="string">&quot;frame&quot;</span>, <span class="attr">bitmap</span>: <span class="string">&quot;background_panel&quot;</span>, <span class="attr">width</span>: <span class="number">1000</span>, <span class="attr">height</span>: <span class="number">750</span>, <span class="attr">scale</span>: GUI_SCALE&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">elements</span>: &#123;</span><br><span class="line">        <span class="string">&quot;closeButton&quot;</span>: &#123;<span class="attr">type</span>: <span class="string">&quot;closeButton&quot;</span>, <span class="attr">x</span>: <span class="number">904</span>, <span class="attr">y</span>: <span class="number">26</span>, <span class="attr">bitmap</span>: <span class="string">&quot;close_button_default&quot;</span>, <span class="attr">bitmap2</span>: <span class="string">&quot;close_button_pressed&quot;</span>, <span class="attr">scale</span>: GUI_SCALE&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//一些常规设置</span></span><br><span class="line">testWindow.setCloseOnBackPressed(<span class="literal">true</span>);</span><br><span class="line">testWindow.setBlockingBackground(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="/2021/08/14/UI-2/1629399367119.png" alt="空白窗口"></p><h2 id="TabbedWindow"><a href="#TabbedWindow" class="headerlink" title="TabbedWindow"></a>TabbedWindow</h2><p><code>TabbedWindow</code>可用于创建标签式窗口，如原版的玩家背包一样，具有多个可切换的标签页。</p><p>TabbedWindow和StandardWindow一样，都继承自WindowGroup。在创建TabbedWindow对象时，所传入的参数与Window相同，与之不同的是TabbedWindow多了一些函数。</p><p>使用<code>new UI.TabbedWindow()</code>创建一个空白的TabbedWindow，效果如下<em>（PS：部分异形屏可能会被遮挡部分边界）</em>：</p><p><img src="/2021/08/14/UI-2/%E6%88%AA%E5%B1%8F_20210821_234419.jpg" alt="空白TabbedWindow"></p><p>简单地说明一下这个窗口，左上角的关闭按钮是一个索引值为0的<code>FakeTab</code>（<em>PS：FakeTab指没有对应标签页的标签</em>），标签页的上限为12个，即索引值的范围为<code>0-11</code>（左侧为<code>0-5</code>，右侧为<code>6-11</code>）。</p><p>要添加一个标签页可以使用<code>setTab(index: number, tabOverlay: ElementSet, tabContent: WindowContent, isAlwaysSelected?: boolean): void</code>函数，<code>index</code>即标签页的索引值，<code>tabOverlay</code>是标签的元素集（如关闭按钮），tabContent即为标签页展示的窗口内容，格式与之前介绍的基本无异。</p><p>因为setTab函数并不返回创建的Window对象，所以你需要用到<code>getWindowForTab(index: number): Window</code>来函数获取对应索引值的Window实例化对象，以完成对其的动态修改。</p><h2 id="WindowGroup"><a href="#WindowGroup" class="headerlink" title="WindowGroup"></a>WindowGroup</h2><p><code>WindowGroup</code>是StandardWindow和TabbedWindow的父类，其方法基本上都可以在StandardWindow和TabbedWindow中使用。</p><p>WindowGroup诞生的目的是为了能够将复杂的界面模块化，以便提高代码的复用率并降低调试难度，使开发效率提高，最为典型的例子就是IC中的工作台界面（<em>PS：此处不谈其交互逻辑，仅谈其界面</em>）。</p><p><img src="/2021/08/14/UI-2/1629564243594.png" alt="工作台界面"></p><p>该界面由三部分组成，分别为<code>Main</code>·，<code>Slots</code>和<code>Grid</code>，对应下图中的青色，粉色和黄色部分：</p><p><img src="/2021/08/14/UI-2/1629565268865.png" alt="工作台页面结构"></p><p>阅读<code>workbench.js</code>中工作台界面部分的代码，可以看出该三部分都是先定义WindowContent的JSON描述，然后一一创建Window对象，并使用<code>addWindowInstance(name: string, window: Window): void</code>函数将Window对象添加到WindowGroup对象并声明其对应的名称ID。你也可以直接使用<code>addWindow(name: string, content: WindowContent): Window</code>函数向WindowGroup添加窗口。</p><hr><p>至此，关于UI界面的内容就基本上介绍完毕，当然全部内容不止这些，你需要认真地查阅官方文档以及去学习他人的优秀作品。<br>另外，虽然本教程对于UI与容器的互动只是简单地带过，但此部分内容是相当重要的，应当注重学习（<em>PS：谁让你们当时评论不提容器和方块实体呢XD</em>）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;注意：本教程仅为简单介绍UI的窗口，不会涉及详细的函数。如果想要了解更多请阅读官方文档。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在上期教程中我们简要介绍了ICMod的UI构成与基本控件，接下来将详细介绍控件用法以及如何组成一个“精美”的界面。&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UI PART1</title>
    <link href="https://weifeng233.github.io/2021/06/26/UI-1/"/>
    <id>https://weifeng233.github.io/2021/06/26/UI-1/</id>
    <published>2021-06-26T06:57:07.355Z</published>
    <updated>2021-06-26T07:03:05.492Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Try hard.</p><p>-Zheka Smirnov</p></blockquote><p><em>本文的部分名词与描述或许与别处有出入以至于错误，欢迎在评论区指出</em></p><p>相较于原版MC，IC的UI系统并不有多复杂，可简单地用下图概括<br><img src="/2021/06/26/UI-1/icmod_ui.png" alt="ICMod UI"></p><p>尽管这张图看似过于简略，但事实的确如此。快速掌握UI的基本控件等内容并不困难，但难点是如何用它们拼凑出美观且实用的用户界面</p><p><em>PS：本文不会讲到每一个控件及其函数，更详细的内容可见<a href="https://docs.mineprogramming.org/modules/ui.html">官方文档</a></em></p><p>首先在IC中，用户界面的控件的大小和单位都是使用同一的unit单位，1unit = 窗口宽度/1000</p><h2 id="UI资源"><a href="#UI资源" class="headerlink" title="UI资源"></a>UI资源</h2><p>UI所使用到的贴图存放于构筑文件(build.config)所指定的gui类型的资源文件夹，在使用时只需要输入文件名即可(不包含后缀与文件夹)</p><p>除此之外，还有：</p><p>color: 颜色，即Android的Color类，可使用android.graphics.Color.rgb(r, g, b)等自定义颜色</p><p>font: 字体，包含三个属性，{size: 文本大小, color: 文本颜色, shadow: 文本阴影}，其中文本阴影为范围[0, 1]的浮点数</p><p>frame: 边框，一般使用大小为16x16的贴图，在使用时会被自动拉伸至所需大小</p><h2 id="Drawing"><a href="#Drawing" class="headerlink" title="Drawing"></a>Drawing</h2><p>Drawing，顾名思义就是在界面中进行绘制，在UI的描述对象中Drawing为一个包含绘制指令的数组</p><p><em>描述对象：用于设定UI以及在UI打开时对其进行动态修改</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line"><span class="attr">drawing</span>: [</span><br><span class="line">    &#123;<span class="comment">/*指令1*/</span>&#125;,</span><br><span class="line">    &#123;<span class="comment">/*指令2*/</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>常用标准指令如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;background&quot;</span>, <span class="attr">color</span>: 颜色&#125; <span class="comment">//填充背景颜色</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;bitmap&quot;</span>, <span class="attr">bitmap</span>: 贴图, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">width</span>: <span class="built_in">Number</span>, <span class="attr">height</span>: <span class="built_in">Number</span>, <span class="attr">scale</span>: <span class="built_in">Number</span>&#125; <span class="comment">//绘制贴图，scale - 贴图像素和unit的缩放比例，默认1像素=1unit</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;frame&quot;</span>, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">width</span>: <span class="built_in">Number</span>, <span class="attr">height</span>: <span class="built_in">Number</span>, <span class="attr">bitmap</span>: 贴图, <span class="attr">bg</span>: 颜色, <span class="attr">scale</span>: <span class="built_in">Number</span>&#125; <span class="comment">//绘制边框，bg - 边框背景颜色</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">text</span>: <span class="built_in">String</span>, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">font</span>: 字体&#125; <span class="comment">//绘制文本</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;line&quot;</span>, <span class="attr">x1</span>: <span class="built_in">Number</span>, <span class="attr">y1</span>: <span class="built_in">Number</span>, <span class="attr">x2</span>: <span class="built_in">Number</span>, <span class="attr">y2</span>: <span class="built_in">Number</span>, <span class="attr">width</span>: <span class="built_in">Number</span>, <span class="attr">height</span>: <span class="built_in">Number</span>, <span class="attr">color</span>: 颜色&#125; <span class="comment">//绘制直线，width - 直线粗细</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;custom&quot;</span>, <span class="attr">onDraw</span>: <span class="built_in">Function</span>(canvas, scale)&#125; <span class="comment">//自定义绘制，onDraw - 在绘制时调用的函数，传参包括当前绘制的Canvas对象和scale数值，无返回值</span></span><br></pre></td></tr></table></figure><p><em>PS：custom drawing的canvas为Android的Canvas类</em></p><h2 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h2><p>Elements，指UI中的控件，与Drawing不同的是Elements在描述对象里为一个包含各控件的对象</p><p>Elements中的每一个控件都有其唯一且独特的名称，即每一个对象都有其唯一的建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line"><span class="attr">elements</span>: &#123;</span><br><span class="line">    <span class="string">&quot;名称1&quot;</span>: &#123;<span class="comment">/*元素1*/</span>&#125;,</span><br><span class="line">    <span class="string">&quot;名称2&quot;</span>: &#123;<span class="comment">/*元素2*/</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个元素都有以下基本属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;type&quot;</span>, <span class="comment">//元素类型</span></span><br><span class="line">    <span class="attr">x</span>: number, <span class="comment">//x坐标</span></span><br><span class="line">    <span class="attr">y</span>: number, <span class="comment">//y坐标</span></span><br><span class="line">    <span class="attr">z</span>: number, <span class="comment">//z坐标，用于区分控件层次防止混乱重叠</span></span><br><span class="line">    <span class="attr">clicker</span>: Click对象 <span class="comment">//控件点击对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处控件点击对象指一个包含短时点击事件和长时点击事件函数的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">onClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">position, container, tileEntity, <span class="built_in">window</span>, canvas, scale</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//container - 界面打开的容器</span></span><br><span class="line">          <span class="comment">//tileEntity - 如果界面是为某方块实体打开的，它就会传出它，否则传出null</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">onLongClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">position, container, tileEntity, <span class="built_in">window</span>, canvas, scale</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//container - 界面打开的容器</span></span><br><span class="line">          <span class="comment">//tileEntity - 如果界面是为某方块实体打开的，它就会传出它，否则传出null</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，常用元素如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;slot&quot;</span>, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">size</span>: <span class="built_in">Number</span>, <span class="attr">visual</span>: <span class="built_in">Boolean</span>/<span class="built_in">Function</span>(id, data, count), <span class="attr">bitmap</span>: 贴图, <span class="attr">clicker</span>: Click对象&#125; <span class="comment">//物品格，visual - 是否可选中</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;invSlot&quot;</span>, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">size</span>: <span class="built_in">Number</span>, <span class="attr">index</span>: <span class="built_in">Number</span>, <span class="attr">bitmap</span>: 贴图&#125; <span class="comment">//背包物品格，index - 对应背包物品格id</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;button&quot;</span>, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">bitmap</span>: 贴图, <span class="attr">bitmap2</span>: 贴图, <span class="attr">scale</span>: <span class="built_in">Number</span>, <span class="attr">clicker</span>: Click对象&#125; <span class="comment">//按钮，bitmap2 - 按下时贴图，button的Click对象与其他的稍有不同，其点击事件函数的参数为(container, tileEntity, position, window, canvas, scale)</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;closeButton&quot;</span>, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">global</span>: <span class="built_in">Boolean</span>, <span class="attr">bitmap</span>: 贴图, <span class="attr">bitmap2</span>: 贴图, <span class="attr">scale</span>: <span class="built_in">Number</span>&#125; <span class="comment">//关闭窗口按钮，global - 为真时将关闭窗口组内所有窗口，否则只关闭所在单窗口，详见下文</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;scale&quot;</span>, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">direction</span>: <span class="built_in">Number</span>, <span class="attr">bitmap</span>: 贴图, <span class="attr">scale</span>: <span class="built_in">Number</span>, <span class="attr">invert</span>: <span class="built_in">Number</span>, <span class="attr">overlay</span>: 贴图, <span class="attr">overlayScale</span>: <span class="built_in">Number</span>, <span class="attr">overlayOffset</span>: &#123;<span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>&#125;&#125; <span class="comment">//刻度表或进度栏，direction - 朝向，详见下文，invert - 是否翻转贴图，overlay - 重叠在scale上的贴图，Scale和Offset分别为其缩放比例和相对scale元素的位置</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">width</span>: <span class="built_in">Number</span>, <span class="attr">height</span>: <span class="built_in">Number</span>, <span class="attr">text</span>: <span class="built_in">String</span>, <span class="attr">font</span>: 字体&#125; <span class="comment">//文本</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;fps&quot;</span>, <span class="attr">interpolate</span>: <span class="built_in">Boolean</span>, <span class="attr">period</span>: <span class="built_in">Number</span>, <span class="attr">font</span>: 字体, <span class="attr">multiline</span>: <span class="built_in">Boolean</span>, <span class="attr">format</span>: <span class="built_in">Boolean</span>, <span class="attr">maxCharsPerLine</span>: <span class="built_in">Number</span>&#125;<span class="comment">//FPS文本</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;image&quot;</span>, <span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>, <span class="attr">bitmap</span>: 贴图, <span class="attr">scale</span>: <span class="built_in">Number</span>, <span class="attr">overlay</span>: 贴图, <span class="attr">overlayScale</span>: <span class="built_in">Number</span>, <span class="attr">overlayOffset</span>: &#123;<span class="attr">x</span>: <span class="built_in">Number</span>, <span class="attr">y</span>: <span class="built_in">Number</span>&#125;, <span class="attr">clicker</span>: Click对象&#125; <span class="comment">//贴图</span></span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&quot;custom&quot;</span>, <span class="attr">onSetup</span>: <span class="built_in">Function</span>(element: Element), <span class="attr">onDraw</span>: <span class="built_in">Function</span>(element, canvas, scale), <span class="attr">onTouchReleased</span>: <span class="built_in">Function</span>(element), <span class="attr">onBindingUpdated</span>: <span class="built_in">Function</span>(element, name, value), <span class="attr">onReset</span>: <span class="built_in">Function</span>(element), <span class="attr">onRelease</span>: <span class="built_in">Function</span>(element), <span class="attr">onContainerInit</span>: <span class="built_in">Function</span>(element, container, elementName)&#125;<span class="comment">//自定义元素，各函数均无返回值</span></span><br></pre></td></tr></table></figure><p>除以上元素之外，还有Scroll，Switch，Tab等元素未被提及，但用法大同小异，建议自行按照官方文档进行尝试，这样才是最有效率的学习方法</p><p><em>direction参数:</em></p><p><em>0 - 朝右<br>1 - 朝上<br>2 - 朝左<br>3 - 朝下</em></p><hr><p>在简要介绍完Drawing和Elments后，在介绍重头戏Window之前先来补充一点其他内容</p><h3 id="自定义参数"><a href="#自定义参数" class="headerlink" title="自定义参数"></a>自定义参数</h3><p>用于修改Window的一些默认参数，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">params: &#123;</span><br><span class="line">     <span class="attr">slot</span>: <span class="string">&quot;格子贴图&quot;</span>,</span><br><span class="line">     <span class="attr">invSlot</span>: <span class="string">&quot;背包格子贴图&quot;</span>,</span><br><span class="line">     <span class="attr">frame</span>: <span class="string">&quot;平面边框贴图&quot;</span>,</span><br><span class="line">     <span class="attr">selection</span>: <span class="string">&quot;格子高亮贴图&quot;</span>,</span><br><span class="line">     <span class="attr">closeButton</span>: <span class="string">&quot;关闭按钮贴图&quot;</span>,</span><br><span class="line">     <span class="attr">closeButton2</span>: <span class="string">&quot;按下的关闭按钮贴图&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UI-getContext"><a href="#UI-getContext" class="headerlink" title="UI.getContext()"></a>UI.getContext()</h3><p>该函数用于获取Android UI线程的上下文，以便调用Android API来操控界面控件</p><h3 id="UI-getScreenHeight"><a href="#UI-getScreenHeight" class="headerlink" title="UI.getScreenHeight()"></a>UI.getScreenHeight()</h3><p>获取以unit为单位的屏幕高度，与之相同的还有UI.getScreenRelativeHeight()</p><h3 id="ElementSet"><a href="#ElementSet" class="headerlink" title="ElementSet"></a>ElementSet</h3><p>元素集合</p><h3 id="WindowLocation"><a href="#WindowLocation" class="headerlink" title="WindowLocation"></a>WindowLocation</h3><p>窗口位置及大小，使用unit作为单位，详细参数见官方文档</p><h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><p>窗口风格，有CLASSIC和DEFAULT两种</p><h3 id="Slot，FullSlot"><a href="#Slot，FullSlot" class="headerlink" title="Slot，FullSlot"></a>Slot，FullSlot</h3><p>窗口中的物品格对象，Slot包含物品的id、特殊值、数量和额外数据，FullSlot则在其基础上添加了如drop、set等方法</p><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>在官方文档中，窗口(Window)有如下几个类：</p><ul><li>StandardWindow</li><li>StandartWindow</li><li>TabbedWindow</li><li>Window</li><li>WindowGroup</li></ul><p>在这里将暂先略讲StandartWindow，Window和WindowGroup</p><h3 id="StandartWindow"><a href="#StandartWindow" class="headerlink" title="StandartWindow"></a>StandartWindow</h3><p>定义为UI.StandartWindow类，以一个描述对象定义界面</p><p>描述对象格式(摘自BigFish和方法放寒假翻译的官方Wiki第8-2节)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">standart</span>: &#123;<span class="comment">//这种类型的界面标准参数在这里写入，它们允许你快速地设置基本的元素，例如标题、背景和背包</span></span><br><span class="line">          <span class="comment">//如果你想定义标准的元素，但是又不想改变默认值，那么就单写上值 - standart: true，例如inventory: &#123;standart: true&#125;</span></span><br><span class="line">          <span class="attr">header</span>: &#123;<span class="comment">//设定你是否需要一个标头，包含一个标题和和一个关闭按钮</span></span><br><span class="line">               <span class="attr">text</span>: &#123;<span class="comment">//必需的参数，如果你定义了标头</span></span><br><span class="line">                    <span class="attr">text</span>: <span class="string">&quot;标题文本&quot;</span>, <span class="comment">//文本内容，必需的参数</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">Font</span>: &#123;...&#125;, <span class="comment">//文本字体，如果你想改变默认值，就请定义它</span></span><br><span class="line">               <span class="attr">color</span>: 颜色, <span class="comment">//只有当你想改变标题颜色的时候才需要</span></span><br><span class="line">               <span class="attr">frame</span>: <span class="string">&quot;边框文本&quot;</span>, <span class="comment">//只有当你想改变标头边框的时候才需要</span></span><br><span class="line">               <span class="attr">width</span>: <span class="number">80</span>, <span class="comment">//表头的高度，以unit为单位</span></span><br><span class="line">               <span class="attr">hideButton</span>: <span class="literal">true</span>, <span class="comment">//定义并设置为true则移除关闭按钮</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">inventory</span>: &#123;<span class="comment">//要想定义标准背包，请使用inventory: &#123;standart: true&#125;</span></span><br><span class="line">               <span class="attr">width</span>: <span class="number">300</span>, <span class="comment">//背包窗口的宽度</span></span><br><span class="line">               <span class="attr">padding</span>: <span class="number">20</span>, <span class="comment">//背包窗口的内边距</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">background</span>: &#123;<span class="comment">//要定义一个默认背景，请使用background: &#123;standart: true&#125;</span></span><br><span class="line">               <span class="attr">color</span>: 颜色, <span class="comment">//如果你想改变背景的颜色就定义它</span></span><br><span class="line">               <span class="attr">bitmap</span>: <span class="string">&quot;背景图片&quot;</span>, <span class="comment">//如果你想添加一个背景图片就定义它</span></span><br><span class="line">               <span class="attr">frame</span>: <span class="string">&quot;边框贴图&quot;</span> <span class="comment">//如果你想添加一个边框就定义它</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">minHeight</span>: <span class="number">650</span>, <span class="comment">//如果以unit为单位的窗口高度小于这个参数的值，那么窗口将自动转变为滚动窗口，以此来保证它的内部大小的高度为minHeight units</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">params</span>: &#123;</span><br><span class="line">          <span class="comment">//自定义（改变默认材质）</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">drawing</span>: [<span class="comment">/*背景渲染指令*/</span>],</span><br><span class="line">     <span class="attr">elements</span>: &#123;<span class="comment">/*元素的描述*/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StandartWindow是适用性最高的窗口，在多人游戏中表现优于Window，但尽管如此绝对布局仍是其一大缺点，在实际使用时需要考虑到不同的屏幕尺寸会造成的控件偏移。因此，<em><strong>尽量将控件放置在屏幕内部区域</strong></em></p><h3 id="Window-1"><a href="#Window-1" class="headerlink" title="Window"></a>Window</h3><p>相较于StandartWindow，Window的优点在于其灵活性，与默认为方块互动界面的StandartWindow不同，Window可以通过修改WindowLocation来显示在游戏界面上的任意位置，且可以通过适当修改padding值来尽可能避免控件偏移。</p><p><em>Window默认没有关闭按钮和玩家背包栏，在使用时需要按需自行添加</em></p><h3 id="WindowGroup"><a href="#WindowGroup" class="headerlink" title="WindowGroup"></a>WindowGroup</h3><p>StandartWindow和Window都是单个窗口，如果需要复杂的界面那么用多个窗口组合无疑是最最好的选择，将一个复杂窗口分为多个小窗口也可以提高调试效率。</p><p>WindowGroup的主要作用就是将多个Window整合在一起，将其组合布局在一起，例如现在的工作台界面就是一个包含3个Window的WindowGroup</p><h3 id="Hierarchic-UI库"><a href="#Hierarchic-UI库" class="headerlink" title="Hierarchic UI库"></a>Hierarchic UI库</h3><p><a href="https://github.com/zheka2304/innercore-hierarchic-ui">HierarchicUI</a>由Zheka开发，用于以json来定义分层式的UI，可以方便的创建绝对布局和线性布局，届时json会被解析为WindowGroup</p><p>此外，该库还可以定义视图布局并且对于一个视图可以灵活地嵌入到其他界面，并且基于它创建继承其全部属性的子视图，无疑让WindowGroup展示美观的复杂界面更加容易。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Try hard.&lt;/p&gt;
&lt;p&gt;-Zheka Smirnov&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;本文的部分名词与描述或许与别处有出入以至于错误，欢迎在评论区指出&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;相较于原版MC，IC的UI系统并不有多复杂，</summary>
      
    
    
    
    
  </entry>
  
</feed>
